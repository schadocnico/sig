{"version":3,"sources":["bdd.js","app.js","index.js"],"names":["Bdd","useEffect","fetch","then","response","console","log","json","data","setLoading","setApiData","useState","apiData","loading","map","salle","className","fonction","String","OLMapFragment","props","updateDimensions","bind","h","window","innerWidth","innerHeight","this","setState","height","addEventListener","format","Map","target","layers","TileLayer","source","TileWMSSource","ratio","url","params","tiled","tilesOrigin","controls","DefaultControls","extend","ZoomSlider","MousePosition","ScaleLine","OverviewMap","view","View","projection","center","zoom","getView","fit","getSize","removeEventListener","style","width","state","backgroundColor","id","React","Component","App","ReactDOM","render","document","getElementById"],"mappings":"+OAmDeA,EAjDH,WACRC,qBAAU,WAMFC,MAFY,wBAGPC,MAAK,SAACC,GAEH,OADAC,QAAQC,IAAIF,GACLA,EAASG,UAEnBJ,MAAK,SAACK,GACHH,QAAQC,IAAIE,GACZC,GAAW,GACXC,EAAWF,QAIxB,IAnBW,MAoBgBG,mBAAS,IApBzB,mBAoBPC,EApBO,KAoBEF,EApBF,OAqBgBC,oBAAS,GArBzB,mBAqBPE,EArBO,KAqBEJ,EArBF,KAsBd,OACI,eAAC,WAAD,WACI,iCACI,8CAEJ,gCACiB,IAAZI,EACG,8BACI,8CAGJ,kCACKD,EAAQE,KAAI,SAACC,GAEV,OACI,qBAAKC,UAAU,kBAAf,SACI,4BAAID,EAAME,YADwBC,OAAOH,EAAMA,mB,2ECQ7EI,G,uDAEF,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAFT,E,+DAKf,IAAMC,EAAIC,OAAOC,YAAc,IAAMD,OAAOE,YAAc,IAC1DC,KAAKC,SAAS,CAACC,OAAQN,M,2CAGvBC,OAAOM,iBAAiB,SAAUH,KAAKN,kBACvCM,KAAKN,qB,0CAGL,IAAIU,EAAS,YAIPjB,EAAM,IAAIkB,IAAI,CAEhBC,OAAQ,MACRC,OAAQ,CACJ,IAAIC,IAAU,CACVC,OAAQ,IAAIC,IAAc,CACxBC,MAAO,EACPC,IAAK,kDACLC,OAAQ,CAAC,OAAUT,EACV,QAAW,QACd,OAAU,GACV,OAAU,aACV,WAAc,sCAI1B,IAAII,IAAU,CACVC,OAAQ,IAAIC,IAAc,CACxBC,MAAO,EACPC,IAAK,kDACLC,OAAQ,CAAC,OAAUT,EACV,QAAW,QACXU,OAAO,EACV,OAAU,GACV,OAAU,aACV,WAAc,iCACdC,YAAa,0CAM7BC,SAAUC,cAAkBC,OAAO,CAC/B,IAAIC,IACJ,IAAIC,IACJ,IAAIC,IACJ,IAAIC,MAGRC,KAAM,IAAIC,IAAK,CACXC,WAAY,YACZC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAGdxC,EAAIyC,UAAUC,IAhDD,CAAC,iBAAkB,iBAC5B,iBAAkB,kBA+CI1C,EAAI2C,a,6CAG9BjC,OAAOkC,oBAAoB,SAAU/B,KAAKN,oB,+BAK1C,IAAMsC,EAAQ,CACVC,MAAO,OACP/B,OAAOF,KAAKkC,MAAMhC,OAClBiC,gBAAiB,WAErB,OACI,qBAAKC,GAAG,MAAMJ,MAAOA,Q,GA9ELK,IAAMC,YA8FnBC,MAVf,SAAa9C,GAEL,OACI,gCACG,cAAC,EAAD,IACA,cAAC,EAAD,QClIf+C,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.2fa1cc74.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\n\r\nconst Bdd = () => {\r\n    useEffect(() => {\r\n        const getAPI = () => {\r\n            // Change this endpoint to whatever local or online address you have\r\n            // Local PostgreSQL Database\r\n            const API = '176.169.46.223:5000/';\r\n\r\n            fetch(API)\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    console.log(data);\r\n                    setLoading(false);\r\n                    setApiData(data);\r\n                });\r\n        };\r\n        getAPI();\r\n    }, []);\r\n    const [apiData, setApiData] = useState([]);\r\n    const [loading, setLoading] = useState(true);\r\n    return (\r\n        <Fragment>\r\n            <header>\r\n                <h1>Les salles</h1>\r\n            </header>\r\n            <main>\r\n                {loading === true ? (\r\n                    <div>\r\n                        <h1>Loading...</h1>\r\n                    </div>\r\n                ) : (\r\n                    <section>\r\n                        {apiData.map((salle) => {\r\n\r\n                            return (\r\n                                <div className=\"salle-container\" key={String(salle.salle)}>\r\n                                    <p>{salle.fonction}</p>\r\n                                </div>\r\n                            );\r\n                        })}\r\n                    </section>\r\n                )}\r\n            </main>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default Bdd;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport Bdd from \"./bdd.js\";\r\n// Start Openlayers imports\r\nimport { \r\n    Map,\r\n    View\r\n } from 'ol'\r\nimport {\r\n    GeoJSON,\r\n    XYZ\r\n} from 'ol/format'\r\nimport {\r\n    Tile as TileLayer,\r\n    Vector as VectorLayer\r\n} from 'ol/layer'\r\nimport {\r\n    Vector as VectorSource,\r\n    OSM as OSMSource,\r\n    XYZ as XYZSource,\r\n    TileWMS as TileWMSSource\r\n} from 'ol/source'\r\nimport {\r\n    Select as SelectInteraction,\r\n    defaults as DefaultInteractions\r\n} from 'ol/interaction'\r\nimport { \r\n    Attribution,\r\n    ScaleLine,\r\n    ZoomSlider,\r\n    Zoom,\r\n    Rotate,\r\n    MousePosition,\r\n    OverviewMap,\r\n    defaults as DefaultControls\r\n} from 'ol/control'\r\nimport {\r\n    Style,\r\n    Fill as FillStyle,\r\n    RegularShape as RegularShapeStyle,\r\n    Stroke as StrokeStyle\r\n} from 'ol/style'\r\n\r\nimport { \r\n    Projection,\r\n    get as getProjection\r\n } from 'ol/proj'\r\nclass OLMapFragment extends React.Component {\r\n \r\n    constructor(props) {\r\n        super(props)\r\n        this.updateDimensions = this.updateDimensions.bind(this)\r\n    }\r\n    updateDimensions(){\r\n        const h = window.innerWidth >= 992 ? window.innerHeight : 400\r\n        this.setState({height: h})\r\n    }\r\n    componentWillMount(){\r\n        window.addEventListener('resize', this.updateDimensions)\r\n        this.updateDimensions()\r\n    }\r\n    componentDidMount(){\r\n        let format = 'image/png';\r\n        let bounds = [1.93954952537819, 47.8448985682432,\r\n            1.94007434047805, 47.8455632040748];\r\n        // Create an Openlayer Map instance with two tile layers\r\n        const map = new Map({\r\n            //  Display the map in the div with the id of map\r\n            target: 'map',\r\n            layers: [\r\n                new TileLayer({\r\n                    source: new TileWMSSource({\r\n                      ratio: 1,\r\n                      url: 'http://176.169.46.223:8080/geoserver/espace/wms',\r\n                      params: {'FORMAT': format,\r\n                               'VERSION': '1.1.1',  \r\n                            \"STYLES\": '',\r\n                            \"LAYERS\": 'espace:rdc',\r\n                            \"exceptions\": 'application/vnd.ogc.se_inimage',\r\n                      }\r\n                    })\r\n                }),\r\n                new TileLayer({\r\n                    source: new TileWMSSource({\r\n                      ratio: 1,\r\n                      url: 'http://176.169.46.223:8080/geoserver/espace/wms',\r\n                      params: {'FORMAT': format,\r\n                               'VERSION': '1.1.1',\r\n                               tiled: true,\r\n                            \"STYLES\": '',\r\n                            \"LAYERS\": 'espace:rdc',\r\n                            \"exceptions\": 'application/vnd.ogc.se_inimage',\r\n                            tilesOrigin: 1.93954952537819 + \",\" + 47.8448985682432\r\n                      }\r\n                    })\r\n                })\r\n            ],\r\n            // Add in the following map controls\r\n            controls: DefaultControls().extend([\r\n                new ZoomSlider(),\r\n                new MousePosition(),\r\n                new ScaleLine(),\r\n                new OverviewMap()\r\n            ]),\r\n            // Render the tile layers in a map view with a Mercator projection\r\n            view: new View({\r\n                projection: 'EPSG:4326',\r\n                center: [0, 0],\r\n                zoom: 2\r\n            })\r\n        })\r\n        map.getView().fit(bounds, map.getSize());\r\n    }\r\n    componentWillUnmount(){\r\n        window.removeEventListener('resize', this.updateDimensions)\r\n    }\r\n\r\n    \r\n    render(){\r\n        const style = {\r\n            width: '100%',\r\n            height:this.state.height,\r\n            backgroundColor: '#cccccc',\r\n        }\r\n        return (\r\n            <div id='map' style={style} >\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction App(props){\r\n        \r\n        return (\r\n            <div>\r\n               <OLMapFragment />\r\n               <Bdd />\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./app.js\";\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById(\"root\")\r\n);"],"sourceRoot":""}